 export data in some format (series of freqDHist batches? e.g. ~5sec length) + mark style
 scan specified folder and handle all mp3 there (skip short mp3, as they aren't songs)
 currently DbConversion is performed on each channel, then averaging is being made to get 1 Histogram. Consider other choices (export stereo histogram-unlikely, perform averaging first, toDb - last)
 Performance: implement Mp3AveragingDecoder - which will average all channels before passing data to window-dft-toDb function chain
 Refactor: move normalization from Mp3Decoder to HistogramCreator? Or better, make a modularized framework outta HistogramCreator
 Refactor: move silence trimming from MatFileExporter to a more general place.
 Think about when channel concat. should take place, perhaps before DFT? Too much pain sync'ing buffer length for each channel.
 Handle extreme values (short samples e.g.)
 Try to use following feature vector: concat ((k subsequent hists), (k hists with distance 1), (k hists with distance 2) .. (k hists with distance n))
                             Purpose: to have some "long time" dependencies data. Of course, the ideal variant is to have long enough sample of only subsequent hists,
                             but because of performance it could be not achievable.
   May increase dimensionality substantially. Need to check. PCA for one, will not work on my PC with too much histograms concatenated (more than 8) =)                             
 Try to use raw (without DFT) data. 
   Raw data currently takes twice as much space (as in vector length) that histogram. But histograms are not built using overlapping windows - best to fix it.
   Also may be useful to consider other audio characteristics: spectrogram mfcc flux zcr rolloff
 
 I propose to take any data and try to use it in some NN, in case of problems with space try PCA next.
 Sparse coding is expensive by itself, also it may not always help - in PCA for instance it does not help (and actually it increases dimensionality). 
 
 
Resolved:
 handle end of the buffer (or discard it?)
 rewrite using stream API (doesn't seem to improve much)
 test compatibility with diff. formats of mp3 (looks OK, but varying sampleRates & channelCnt require scaling of various params)
  + for now - discard all that's not 44100 Hz, 2 channels 	
 perform normalization (save modified mp3 or PCM to check?)
 don't process silent (low vol) parts
 